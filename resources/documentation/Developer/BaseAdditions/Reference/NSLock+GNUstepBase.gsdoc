<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSLock+GNUstepBase" up="BaseAdditions">
  <head>
    <title>NSLock+GNUstepBase documentation</title>
    <author name="Richard Frith-Macdonald">
      <email address="rfm@gnu.org">
        rfm@gnu.org
      </email>
    </author>
    <date>Generated at 2023-12-20 19:35:46 -0500</date>
    <copy>2003-2010 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSLock(GNUstepBase)
        category
      </heading>
      <category name="GNUstepBase" class="NSLock" ovadd="0.0.0">
        <declared>GNUstepBase/NSLock+GNUstepBase.h</declared>
        <desc>
          Returns IDENT which will be initialized to an
          instance of a CLASSNAME in a thread safe manner. If
          IDENT has been previously initialized this macro merely
          returns IDENT. IDENT is considered uninitialized, if
          it contains <code>nil</code>. CLASSNAME must be either
          NSLock, NSRecursiveLock or one of their subclasses.
          See
          <ref type="method" id="+newLockAt:" class="NSLock(GNUstepBase)">[NSLock(GNUstepBase) +newLockAt:]</ref> for details. This macro is intended for code that cannot insure that a lock can be initialized in thread safe manner otherwise.
<example>
 NSLock *my_lock = nil;

 void function (void)
 {
   [GS_INITIALIZED_LOCK(my_lock, NSLock) lock];
   do_work ();
   [my_lock unlock];
 }

 </example>
        </desc>
        <method type="id" factory="yes" ovadd="0.0.0">
          <sel>newLockAt:</sel>
          <arg type="id*">location</arg>
          <desc>
            Initializes the <strong>id</strong> pointed to
            by <var>location</var> with a new instance of the
            receiver's class in a thread safe manner, unless
            it has been previously initialized. Returns the contents
            pointed to by <var>location</var>. The
            <var>location</var> is considered unintialized if it
            contains <code>nil</code>. <br /> This method is
            used in the GS_INITIALIZED_LOCK macro to initialize
            lock variables when it cannot be insured that they can
            be initialized in a thread safe environment.
<example>
 NSLock *my_lock = nil;

 void function (void)
 {
   [GS_INITIALIZED_LOCK(my_lock, NSLock) lock];
   do_work ();
   [my_lock unlock];
 }
 
 </example>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSRecursiveLock(GNUstepBase)
        category
      </heading>
      <category name="GNUstepBase" class="NSRecursiveLock" ovadd="0.0.0">
        <declared>GNUstepBase/NSLock+GNUstepBase.h</declared>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <method type="id" factory="yes" ovadd="0.0.0">
          <sel>newLockAt:</sel>
          <arg type="id*">location</arg>
          <desc>
            Initializes the <strong>id</strong> pointed to
            by <var>location</var> with a new instance of the
            receiver's class in a thread safe manner, unless
            it has been previously initialized. Returns the contents
            pointed to by <var>location</var>. The
            <var>location</var> is considered unintialized if it
            contains <code>nil</code>. <br /> This method is
            used in the GS_INITIALIZED_LOCK macro to initialize
            lock variables when it cannot be insured that they can
            be initialized in a thread safe environment.
<example>
 NSLock *my_lock = nil;

 void function (void)
 {
   [GS_INITIALIZED_LOCK(my_lock, NSLock) lock];
   do_work ();
   [my_lock unlock];
 }
 
 </example>
          </desc>
        </method>
      </category>
    </chapter>
  </body>
</gsdoc>

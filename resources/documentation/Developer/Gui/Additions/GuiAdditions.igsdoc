{
    categories = {
	GSDisplayServer = {
	    EventOps = GSDisplayServer;
	    WindowOps = GSDisplayServer;
	};
	GSTheme = {
	    Drawing = GSTheme;
	    LowLevelDrawing = GSTheme;
	    Menus = GSTheme;
	    MidLevelDrawing = GSTheme;
	    NSBrowserCell = GSTheme;
	    NSWindow = GSTheme;
	    OpenSavePanels = GSTheme;
	    PrintPanels = GSTheme;
	};
    };
    category = {
	"GSDisplayServer(EventOps)" = GSDisplayServer;
	"GSDisplayServer(WindowOps)" = GSDisplayServer;
	"GSTheme(Drawing)" = GSTheme;
	"GSTheme(LowLevelDrawing)" = GSTheme;
	"GSTheme(Menus)" = GSTheme;
	"GSTheme(MidLevelDrawing)" = GSTheme;
	"GSTheme(NSBrowserCell)" = GSTheme;
	"GSTheme(NSWindow)" = GSTheme;
	"GSTheme(OpenSavePanels)" = GSTheme;
	"GSTheme(PrintPanels)" = GSTheme;
    };
    class = {
	GSDisplayServer = GSDisplayServer;
	GSHbox = GSHbox;
	GSPageLayout = GSTheme;
	GSPrintPanel = GSTheme;
	GSTable = GSTable;
	GSTheme = GSTheme;
	GSVbox = GSVbox;
    };
    classvars = {
	GSDisplayServer = {
	    "drag_types" = GSDisplayServer;
	    "event_queue" = GSDisplayServer;
	    "server_info" = GSDisplayServer;
	};
	GSHbox = {
	    "_defaultMinXMargin" = GSHbox;
	    "_haveViews" = GSHbox;
	};
	GSTable = {
	    "_columnDimension" = GSTable;
	    "_columnXOrigin" = GSTable;
	    "_expandColumn" = GSTable;
	    "_expandRow" = GSTable;
	    "_expandingColumnNumber" = GSTable;
	    "_expandingRowNumber" = GSTable;
	    "_havePrisoner" = GSTable;
	    "_jails" = GSTable;
	    "_maxXBorder" = GSTable;
	    "_maxYBorder" = GSTable;
	    "_minColumnDimension" = GSTable;
	    "_minRowDimension" = GSTable;
	    "_minXBorder" = GSTable;
	    "_minYBorder" = GSTable;
	    "_minimumSize" = GSTable;
	    "_numberOfColumns" = GSTable;
	    "_numberOfRows" = GSTable;
	    "_rowDimension" = GSTable;
	    "_rowYOrigin" = GSTable;
	};
	GSVbox = {
	    "_defaultMinYMargin" = GSVbox;
	    "_haveViews" = GSVbox;
	};
    };
    function = {
	DPSDiscardEvents = Functions;
	DPSGetEvent = Functions;
	DPSPeekEvent = Functions;
	DPSPostEvent = Functions;
	GSCurrentServer = Functions;
	GSServerForWindow = Functions;
	GSThemeFillStyleFromString = Functions;
	GSThemeStringFromFillStyle = Functions;
    };
    ivariable = {
	"_columnDimension" = {
	    GSTable = GSTable;
	};
	"_columnXOrigin" = {
	    GSTable = GSTable;
	};
	"_defaultMinXMargin" = {
	    GSHbox = GSHbox;
	};
	"_defaultMinYMargin" = {
	    GSVbox = GSVbox;
	};
	"_expandColumn" = {
	    GSTable = GSTable;
	};
	"_expandRow" = {
	    GSTable = GSTable;
	};
	"_expandingColumnNumber" = {
	    GSTable = GSTable;
	};
	"_expandingRowNumber" = {
	    GSTable = GSTable;
	};
	"_havePrisoner" = {
	    GSTable = GSTable;
	};
	"_haveViews" = {
	    GSHbox = GSHbox;
	    GSVbox = GSVbox;
	};
	"_jails" = {
	    GSTable = GSTable;
	};
	"_maxXBorder" = {
	    GSTable = GSTable;
	};
	"_maxYBorder" = {
	    GSTable = GSTable;
	};
	"_minColumnDimension" = {
	    GSTable = GSTable;
	};
	"_minRowDimension" = {
	    GSTable = GSTable;
	};
	"_minXBorder" = {
	    GSTable = GSTable;
	};
	"_minYBorder" = {
	    GSTable = GSTable;
	};
	"_minimumSize" = {
	    GSTable = GSTable;
	};
	"_numberOfColumns" = {
	    GSTable = GSTable;
	};
	"_numberOfRows" = {
	    GSTable = GSTable;
	};
	"_rowDimension" = {
	    GSTable = GSTable;
	};
	"_rowYOrigin" = {
	    GSTable = GSTable;
	};
	"drag_types" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"event_queue" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"server_info" = {
	    GSDisplayServer = GSDisplayServer;
	};
    };
    method = {
	"+addDragTypes:toWindow:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"+dragTypesForWindow:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"+loadThemeNamed:" = {
	    GSTheme = GSTheme;
	};
	"+orderFrontSharedThemePanel:" = {
	    GSTheme = GSTheme;
	};
	"+removeDragTypes:fromWindow:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"+serverWithAttributes:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"+setCurrentServer:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"+setDefaultServerClass:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"+setTheme:" = {
	    GSTheme = GSTheme;
	};
	"+theme" = {
	    GSTheme = GSTheme;
	};
	"-_printEventQueue" = {
	    "GSDisplayServer(EventOps)" = GSDisplayServer;
	};
	"-_setWindowOwnedByServer:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-activate" = {
	    GSTheme = GSTheme;
	};
	"-addColumn" = {
	    GSTable = GSTable;
	};
	"-addDragTypes:toWindow:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-addRow" = {
	    GSTable = GSTable;
	};
	"-addSeparator" = {
	    GSHbox = GSHbox;
	    GSVbox = GSVbox;
	};
	"-addSeparatorWithMinXMargin:" = {
	    GSHbox = GSHbox;
	};
	"-addSeparatorWithMinYMargin:" = {
	    GSVbox = GSVbox;
	};
	"-addView:" = {
	    GSHbox = GSHbox;
	    GSVbox = GSVbox;
	};
	"-addView:enablingXResizing:" = {
	    GSHbox = GSHbox;
	};
	"-addView:enablingXResizing:withMinXMargin:" = {
	    GSHbox = GSHbox;
	};
	"-addView:enablingYResizing:" = {
	    GSVbox = GSVbox;
	};
	"-addView:enablingYResizing:withMinYMargin:" = {
	    GSVbox = GSVbox;
	};
	"-addView:withMinXMargin:" = {
	    GSHbox = GSHbox;
	};
	"-addView:withMinYMargin:" = {
	    GSVbox = GSVbox;
	};
	"-appOwnsMiniwindow" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-attributes" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-authors" = {
	    GSTheme = GSTheme;
	};
	"-availableDepthsForScreen:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-badgeBackgroundColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-badgeDecorationColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-badgeTextColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-beep" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-boundsForScreen:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-branchImage" = {
	    "GSTheme(NSBrowserCell)" = GSTheme;
	};
	"-browserColumnSeparation" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-browserHeaderDrawingRectForCell:withFrame:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-browserHeaderTextColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-browserUseBezels" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-browserVerticalPadding" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-bundle" = {
	    GSTheme = GSTheme;
	};
	"-buttonMarginsForCell:style:state:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-capturemouse:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-cellForScrollerArrow:horizontal:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-cellForScrollerKnob:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-cellForScrollerKnobSlot:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-closeButtonFrameForBounds:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-closeServer" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-colorClass" = {
	    GSTheme = GSTheme;
	};
	"-colorFlush:state:" = {
	    GSTheme = GSTheme;
	};
	"-colorNamed:state:" = {
	    GSTheme = GSTheme;
	};
	"-colors" = {
	    GSTheme = GSTheme;
	};
	"-contentsOfScreen:inRect:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-deactivate" = {
	    GSTheme = GSTheme;
	};
	"-defaultScrollerWidth" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-didSetDefaultButtonCell:" = {
	    "GSTheme(NSWindow)" = GSTheme;
	};
	"-discardEventsMatchingMask:beforeEvent:" = {
	    "GSDisplayServer(EventOps)" = GSDisplayServer;
	};
	"-displayPopUpMenu:withCellFrame:controlViewWindow:preferredEdge:selectedItem:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-docedited::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-doesProcessEventsForPopUpMenu" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-dragInfo" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-dragTypesForWindow:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-drawBackgroundForMenuView:withFrame:dirtyRect:horizontal:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawBarInside:inCell:flipped:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawBorderAndBackgroundForMenuItemCell:withFrame:inView:state:isHorizontal:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawBorderForImageFrameStyle:frame:view:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawBorderType:frame:view:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawBoxInClipRect:boxType:borderType:inView:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawBrowserHeaderCell:withFrame:inView:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawBrowserInteriorWithFrame:withCell:inView:withImage:alternateImage:isHighlighted:state:isLeaf:" = {
	    "GSTheme(NSBrowserCell)" = GSTheme;
	};
	"-drawBrowserRect:inView:withScrollerRect:columnSize:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawButton:in:view:style:state:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawButton:withClip:" = {
	    "GSTheme(MidLevelDrawing)" = GSTheme;
	};
	"-drawColorWellBorder:withBounds:withClip:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawDarkBezel:withClip:" = {
	    "GSTheme(MidLevelDrawing)" = GSTheme;
	};
	"-drawDarkButton:withClip:" = {
	    "GSTheme(MidLevelDrawing)" = GSTheme;
	};
	"-drawEditorForCell:withFrame:inView:" = {
	    "GSTheme(NSBrowserCell)" = GSTheme;
	};
	"-drawFocusFrame:view:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawFramePhoto:withClip:" = {
	    "GSTheme(MidLevelDrawing)" = GSTheme;
	};
	"-drawGradientBorder:inRect:withClip:" = {
	    "GSTheme(MidLevelDrawing)" = GSTheme;
	};
	"-drawGrayBezel:withClip:" = {
	    "GSTheme(MidLevelDrawing)" = GSTheme;
	};
	"-drawGroove:withClip:" = {
	    "GSTheme(MidLevelDrawing)" = GSTheme;
	};
	"-drawInCell:attributedText:inFrame:" = {
	    "GSTheme(NSBrowserCell)" = GSTheme;
	};
	"-drawKnobInCell:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawLightBezel:withClip:" = {
	    "GSTheme(MidLevelDrawing)" = GSTheme;
	};
	"-drawMenuRect:inView:isHorizontal:itemCells:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawMenuTitleBackground:withBounds:withClip:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawPathComponentCellWithFrame:inView:withCell:isLastComponent:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawPopUpButtonCellInteriorWithFrame:withCell:inView:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawProgressIndicator:withBounds:withClip:atCount:forValue:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawProgressIndicatorBarDeterminate:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawProgressIndicatorBezel:withClip:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawScrollViewRect:inView:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawScrollerRect:inView:hitPart:isHorizontal:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawSegmentedControlSegment:withFrame:inView:style:state:roundedLeft:roundedRight:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawSeparatorItemForMenuItemCell:withFrame:inView:isHorizontal:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawSliderBorderAndBackground:frame:inCell:isHorizontal:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawStepperBorder:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawStepperCell:withFrame:inView:highlightUp:highlightDown:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawStepperDownButton:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawStepperHighlightDownButton:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawStepperHighlightUpButton:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawStepperLightButton::" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawStepperUpButton:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawSwitchBezel:forState:enabled:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawSwitchInRect:forState:enabled:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawSwitchKnob:forState:enabled:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawTabViewRect:inView:withItems:selectedItem:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawTableCornerView:withClip:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawTableHeaderCell:withFrame:inView:state:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawTableHeaderRect:inView:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawTableViewBackgroundInClipRect:inView:withBackgroundColor:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawTableViewGridInClipRect:inView:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawTableViewRect:inView:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawTableViewRow:clipRect:inView:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawTitleForMenuItemCell:withFrame:inView:state:isHorizontal:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawToolbarRect:frame:borderMask:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawWhiteBezel:withClip:" = {
	    "GSTheme(MidLevelDrawing)" = GSTheme;
	};
	"-drawWindowBackground:view:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawWindowBorder:withFrame:forStyleMask:state:andTitle:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-drawsBorderForMenuItemCell:state:isHorizontal:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-fillHorizontalRect:withImage:fromRect:flipped:" = {
	    "GSTheme(LowLevelDrawing)" = GSTheme;
	};
	"-fillRect:withRepeatedImage:fromRect:center:" = {
	    "GSTheme(LowLevelDrawing)" = GSTheme;
	};
	"-fillRect:withTiles:" = {
	    "GSTheme(LowLevelDrawing)" = GSTheme;
	};
	"-fillRect:withTiles:background:" = {
	    "GSTheme(LowLevelDrawing)" = GSTheme;
	};
	"-fillRect:withTiles:background:fillStyle:" = {
	    "GSTheme(LowLevelDrawing)" = GSTheme;
	};
	"-fillVerticalRect:withImage:fromRect:flipped:" = {
	    "GSTheme(LowLevelDrawing)" = GSTheme;
	};
	"-findWindowAt:windowRef:excluding:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-flushwindowrect::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-freecursor:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-getEventMatchingMask:beforeDate:inMode:dequeue:" = {
	    "GSDisplayServer(EventOps)" = GSDisplayServer;
	};
	"-glContextClass" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-glPixelFormatClass" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-handlesWindowDecorations" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-hideApplication:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-hidecursor" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-highlightTableViewSelectionInClipRect:inView:selectingColumns:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-highlightedBranchImage" = {
	    "GSTheme(NSBrowserCell)" = GSTheme;
	};
	"-icon" = {
	    GSTheme = GSTheme;
	};
	"-iconSize" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-iconTileImage" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-imageClass" = {
	    GSTheme = GSTheme;
	};
	"-imagecursor:::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-infoDictionary" = {
	    GSTheme = GSTheme;
	};
	"-init" = {
	    GSHbox = GSHbox;
	    GSTable = GSTable;
	    GSVbox = GSVbox;
	};
	"-initWithAttributes:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-initWithBundle:" = {
	    GSTheme = GSTheme;
	};
	"-initWithNumberOfRows:numberOfColumns:" = {
	    GSTable = GSTable;
	};
	"-isXResizingEnabledForColumn:" = {
	    GSTable = GSTable;
	};
	"-isYResizingEnabledForRow:" = {
	    GSTable = GSTable;
	};
	"-keyForKeyEquivalent:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-license" = {
	    GSTheme = GSTheme;
	};
	"-menuBackgroundColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuBarBackgroundColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuBarBorderColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuBarHeight" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuBorderColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuBorderColorForEdge:isHorizontal:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuHeightForWindow:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-menuItemBackgroundColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuItemHeight" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuSeparatorColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuSeparatorHeight" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuSeparatorInset" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuShouldShowIcon" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-menuSubmenuHorizontalOverlap" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-menuSubmenuVerticalOverlap" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-miniaturizeButtonFrameForBounds:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-minimumSize" = {
	    GSTable = GSTable;
	};
	"-miniwindow:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-modifyRect:forMenu:isHorizontal:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-mouseLocationOnScreen:window:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-mouselocation" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-movewindow::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-name" = {
	    GSTheme = GSTheme;
	};
	"-nameForElement:" = {
	    GSTheme = GSTheme;
	};
	"-nativeWindow:::::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-numberOfColumns" = {
	    GSTable = GSTable;
	};
	"-numberOfRows" = {
	    GSTable = GSTable;
	};
	"-numberOfViews" = {
	    GSHbox = GSHbox;
	    GSVbox = GSVbox;
	};
	"-openPanelClass" = {
	    "GSTheme(OpenSavePanels)" = GSTheme;
	};
	"-orderwindow:::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-organizeMenu:isHorizontal:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-overriddenMethod:for:" = {
	    GSTheme = GSTheme;
	};
	"-pageLayoutClass" = {
	    "GSTheme(PrintPanels)" = GSTheme;
	};
	"-placewindow::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-postEvent:atStart:" = {
	    "GSDisplayServer(EventOps)" = GSDisplayServer;
	};
	"-printPanelClass" = {
	    "GSTheme(PrintPanels)" = GSTheme;
	};
	"-processCommand:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-proposedTitle:forMenuItem:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-proposedTitleWidth:forMenuView:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-putView:atRow:column:" = {
	    GSTable = GSTable;
	};
	"-putView:atRow:column:withMargins:" = {
	    GSTable = GSTable;
	};
	"-putView:atRow:column:withMinXMargin:maxXMargin:minYMargin:maxYMargin:" = {
	    GSTable = GSTable;
	};
	"-putView:atRow:column:withXMargins:yMargins:" = {
	    GSTable = GSTable;
	};
	"-recolorcursor:::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-releasemouse" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-removeDragTypes:fromWindow:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-resizebarHeight" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-resizebarNotchWidth" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-resolutionForScreen:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-restrictWindow:toImage:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-rightMouseDisplay:forEvent:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-savePanelClass" = {
	    "GSTheme(OpenSavePanels)" = GSTheme;
	};
	"-screenList" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-scrollViewScrollersOverlapBorders" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-scrollViewUseBottomCorner" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-scrollerArrowsSameEndForScroller:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-scrollerScrollsByPageForScroller:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-serverDevice" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-setBorder:" = {
	    GSTable = GSTable;
	};
	"-setDefaultMinXMargin:" = {
	    GSHbox = GSHbox;
	};
	"-setDefaultMinYMargin:" = {
	    GSVbox = GSVbox;
	};
	"-setFrameForCloseButton:viewSize:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-setIgnoreMouse::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setKeyEquivalent:forButtonCell:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-setMaxXBorder:" = {
	    GSTable = GSTable;
	};
	"-setMaxYBorder:" = {
	    GSTable = GSTable;
	};
	"-setMenu:forWindow:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-setMinXBorder:" = {
	    GSTable = GSTable;
	};
	"-setMinYBorder:" = {
	    GSTable = GSTable;
	};
	"-setMouseLocation:onScreen:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setName:" = {
	    GSTheme = GSTheme;
	};
	"-setName:forElement:temporary:" = {
	    GSTheme = GSTheme;
	};
	"-setParentWindow:forChildWindow:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setShadow::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setWindowdevice:forContext:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setXBorder:" = {
	    GSTable = GSTable;
	};
	"-setXResizingEnabled:forColumn:" = {
	    GSTable = GSTable;
	};
	"-setYBorder:" = {
	    GSTable = GSTable;
	};
	"-setYResizingEnabled:forRow:" = {
	    GSTable = GSTable;
	};
	"-setalpha::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setcursor:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setcursorcolor:::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setinputfocus:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setinputstate::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setmaxsize::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setminsize::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setresizeincrements::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-setwindowlevel::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-showcursor" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-sizeForBorderType:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-sizeForImageFrameStyle:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-sizeToFit" = {
	    GSTable = GSTable;
	};
	"-slideImage:from:to:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-standardWindowButton:forStyleMask:" = {
	    "GSTheme(NSWindow)" = GSTheme;
	};
	"-standardcursor::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-stepperDownButtonRectWithFrame:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-stepperUpButtonRectWithFrame:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-styleoffsets:::::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-stylewindow::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-tabViewContentRectForBounds:tabViewType:tabView:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-tableHeaderCellDrawingRectForBounds:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-tableHeaderTextColorForState:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-termwindow:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-themeInspector" = {
	    GSTheme = GSTheme;
	};
	"-tilesFlush:state:" = {
	    GSTheme = GSTheme;
	};
	"-tilesNamed:state:" = {
	    GSTheme = GSTheme;
	};
	"-titleViewClassForMenuView:" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-titlebarButtonSize" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-titlebarHeight" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-titlebarPaddingLeft" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-titlebarPaddingRight" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-titlebarPaddingTop" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-titlewindow::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-toolbarBackgroundColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-toolbarBorderColor" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-toolbarIsOpaque" = {
	    "GSTheme(Drawing)" = GSTheme;
	};
	"-updateAllWindowsWithMenu:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-updateMenu:forWindow:" = {
	    "GSTheme(Menus)" = GSTheme;
	};
	"-versionString" = {
	    GSTheme = GSTheme;
	};
	"-window:::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-window::::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-windowDecorator" = {
	    "GSTheme(NSWindow)" = GSTheme;
	};
	"-windowDepthForScreen:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-windowDevice:" = {
	    GSDisplayServer = GSDisplayServer;
	};
	"-windowbacking::" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-windowbounds:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-windowdepth:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-windowdevice:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-windowlevel:" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
	"-windowlist" = {
	    "GSDisplayServer(WindowOps)" = GSDisplayServer;
	};
    };
    output = {
	"../Headers/Additions/GNUstepGUI/GSDisplayServer.h" = (
	    "../Documentation/GuiAdditions/GSDisplayServer.gsdoc",
	    "../Documentation/GuiAdditions/Functions.gsdoc",
	    "../Documentation/GuiAdditions/TypesAndConstants.gsdoc"
	);
	"../Headers/Additions/GNUstepGUI/GSHbox.h" = (
	    "../Documentation/GuiAdditions/GSHbox.gsdoc"
	);
	"../Headers/Additions/GNUstepGUI/GSTable.h" = (
	    "../Documentation/GuiAdditions/GSTable.gsdoc"
	);
	"../Headers/Additions/GNUstepGUI/GSTheme.h" = (
	    "../Documentation/GuiAdditions/GSTheme.gsdoc",
	    "../Documentation/GuiAdditions/Functions.gsdoc",
	    "../Documentation/GuiAdditions/TypesAndConstants.gsdoc"
	);
	"../Headers/Additions/GNUstepGUI/GSVbox.h" = (
	    "../Documentation/GuiAdditions/GSVbox.gsdoc"
	);
    };
    source = {
	"../Headers/Additions/GNUstepGUI/GSDisplayServer.h" = (
	    "GSDisplayServer.m"
	);
	"../Headers/Additions/GNUstepGUI/GSHbox.h" = (
	    "GSHbox.m"
	);
	"../Headers/Additions/GNUstepGUI/GSTable.h" = (
	    "GSTable.m"
	);
	"../Headers/Additions/GNUstepGUI/GSTheme.h" = (
	    "GSTheme.m"
	);
	"../Headers/Additions/GNUstepGUI/GSVbox.h" = (
	    "GSVbox.m"
	);
    };
    super = {
	GSDisplayServer = NSObject;
	GSHbox = GSTable;
	GSPageLayout = NSPageLayout;
	GSPrintPanel = NSPrintPanel;
	GSTable = NSView;
	GSTheme = NSObject;
	GSVbox = GSTable;
    };
    title = {
	Functions = Functions;
	GSDisplayServer = GSDisplayServer;
	GSHbox = GSHbox;
	GSTable = "GSTable class documentation";
	GSTheme = GSTheme;
	GSVbox = GSVbox;
	Gui = GuiAdditions;
	TypesAndConstants = Variables;
    };
    type = {
	GSTabPart = TypesAndConstants;
	GSThemeControlState = TypesAndConstants;
	GSThemeFillStyle = TypesAndConstants;
	"struct GSThemeMargins" = TypesAndConstants;
    };
    unitmethods = {
	GSDisplayServer = {
	    "+addDragTypes:toWindow:" = GSDisplayServer;
	    "+dragTypesForWindow:" = GSDisplayServer;
	    "+removeDragTypes:fromWindow:" = GSDisplayServer;
	    "+serverWithAttributes:" = GSDisplayServer;
	    "+setCurrentServer:" = GSDisplayServer;
	    "+setDefaultServerClass:" = GSDisplayServer;
	    "-addDragTypes:toWindow:" = GSDisplayServer;
	    "-attributes" = GSDisplayServer;
	    "-availableDepthsForScreen:" = GSDisplayServer;
	    "-beep" = GSDisplayServer;
	    "-boundsForScreen:" = GSDisplayServer;
	    "-closeServer" = GSDisplayServer;
	    "-contentsOfScreen:inRect:" = GSDisplayServer;
	    "-dragInfo" = GSDisplayServer;
	    "-dragTypesForWindow:" = GSDisplayServer;
	    "-findWindowAt:windowRef:excluding:" = GSDisplayServer;
	    "-glContextClass" = GSDisplayServer;
	    "-glPixelFormatClass" = GSDisplayServer;
	    "-handlesWindowDecorations" = GSDisplayServer;
	    "-iconSize" = GSDisplayServer;
	    "-iconTileImage" = GSDisplayServer;
	    "-initWithAttributes:" = GSDisplayServer;
	    "-removeDragTypes:fromWindow:" = GSDisplayServer;
	    "-resolutionForScreen:" = GSDisplayServer;
	    "-restrictWindow:toImage:" = GSDisplayServer;
	    "-screenList" = GSDisplayServer;
	    "-serverDevice" = GSDisplayServer;
	    "-slideImage:from:to:" = GSDisplayServer;
	    "-windowDepthForScreen:" = GSDisplayServer;
	    "-windowDevice:" = GSDisplayServer;
	};
	"GSDisplayServer(EventOps)" = {
	    "-_printEventQueue" = GSDisplayServer;
	    "-discardEventsMatchingMask:beforeEvent:" = GSDisplayServer;
	    "-getEventMatchingMask:beforeDate:inMode:dequeue:" = GSDisplayServer;
	    "-postEvent:atStart:" = GSDisplayServer;
	};
	"GSDisplayServer(WindowOps)" = {
	    "-_setWindowOwnedByServer:" = GSDisplayServer;
	    "-appOwnsMiniwindow" = GSDisplayServer;
	    "-capturemouse:" = GSDisplayServer;
	    "-docedited::" = GSDisplayServer;
	    "-flushwindowrect::" = GSDisplayServer;
	    "-freecursor:" = GSDisplayServer;
	    "-hideApplication:" = GSDisplayServer;
	    "-hidecursor" = GSDisplayServer;
	    "-imagecursor:::" = GSDisplayServer;
	    "-miniwindow:" = GSDisplayServer;
	    "-mouseLocationOnScreen:window:" = GSDisplayServer;
	    "-mouselocation" = GSDisplayServer;
	    "-movewindow::" = GSDisplayServer;
	    "-nativeWindow:::::" = GSDisplayServer;
	    "-orderwindow:::" = GSDisplayServer;
	    "-placewindow::" = GSDisplayServer;
	    "-recolorcursor:::" = GSDisplayServer;
	    "-releasemouse" = GSDisplayServer;
	    "-setIgnoreMouse::" = GSDisplayServer;
	    "-setMouseLocation:onScreen:" = GSDisplayServer;
	    "-setParentWindow:forChildWindow:" = GSDisplayServer;
	    "-setShadow::" = GSDisplayServer;
	    "-setWindowdevice:forContext:" = GSDisplayServer;
	    "-setalpha::" = GSDisplayServer;
	    "-setcursor:" = GSDisplayServer;
	    "-setcursorcolor:::" = GSDisplayServer;
	    "-setinputfocus:" = GSDisplayServer;
	    "-setinputstate::" = GSDisplayServer;
	    "-setmaxsize::" = GSDisplayServer;
	    "-setminsize::" = GSDisplayServer;
	    "-setresizeincrements::" = GSDisplayServer;
	    "-setwindowlevel::" = GSDisplayServer;
	    "-showcursor" = GSDisplayServer;
	    "-standardcursor::" = GSDisplayServer;
	    "-styleoffsets:::::" = GSDisplayServer;
	    "-stylewindow::" = GSDisplayServer;
	    "-termwindow:" = GSDisplayServer;
	    "-titlewindow::" = GSDisplayServer;
	    "-window:::" = GSDisplayServer;
	    "-window::::" = GSDisplayServer;
	    "-windowbacking::" = GSDisplayServer;
	    "-windowbounds:" = GSDisplayServer;
	    "-windowdepth:" = GSDisplayServer;
	    "-windowdevice:" = GSDisplayServer;
	    "-windowlevel:" = GSDisplayServer;
	    "-windowlist" = GSDisplayServer;
	};
	GSHbox = {
	    "-addSeparator" = GSHbox;
	    "-addSeparatorWithMinXMargin:" = GSHbox;
	    "-addView:" = GSHbox;
	    "-addView:enablingXResizing:" = GSHbox;
	    "-addView:enablingXResizing:withMinXMargin:" = GSHbox;
	    "-addView:withMinXMargin:" = GSHbox;
	    "-init" = GSHbox;
	    "-numberOfViews" = GSHbox;
	    "-setDefaultMinXMargin:" = GSHbox;
	};
	GSTable = {
	    "-addColumn" = GSTable;
	    "-addRow" = GSTable;
	    "-init" = GSTable;
	    "-initWithNumberOfRows:numberOfColumns:" = GSTable;
	    "-isXResizingEnabledForColumn:" = GSTable;
	    "-isYResizingEnabledForRow:" = GSTable;
	    "-minimumSize" = GSTable;
	    "-numberOfColumns" = GSTable;
	    "-numberOfRows" = GSTable;
	    "-putView:atRow:column:" = GSTable;
	    "-putView:atRow:column:withMargins:" = GSTable;
	    "-putView:atRow:column:withMinXMargin:maxXMargin:minYMargin:maxYMargin:" = GSTable;
	    "-putView:atRow:column:withXMargins:yMargins:" = GSTable;
	    "-setBorder:" = GSTable;
	    "-setMaxXBorder:" = GSTable;
	    "-setMaxYBorder:" = GSTable;
	    "-setMinXBorder:" = GSTable;
	    "-setMinYBorder:" = GSTable;
	    "-setXBorder:" = GSTable;
	    "-setXResizingEnabled:forColumn:" = GSTable;
	    "-setYBorder:" = GSTable;
	    "-setYResizingEnabled:forRow:" = GSTable;
	    "-sizeToFit" = GSTable;
	};
	GSTheme = {
	    "+loadThemeNamed:" = GSTheme;
	    "+orderFrontSharedThemePanel:" = GSTheme;
	    "+setTheme:" = GSTheme;
	    "+theme" = GSTheme;
	    "-activate" = GSTheme;
	    "-authors" = GSTheme;
	    "-bundle" = GSTheme;
	    "-colorClass" = GSTheme;
	    "-colorFlush:state:" = GSTheme;
	    "-colorNamed:state:" = GSTheme;
	    "-colors" = GSTheme;
	    "-deactivate" = GSTheme;
	    "-icon" = GSTheme;
	    "-imageClass" = GSTheme;
	    "-infoDictionary" = GSTheme;
	    "-initWithBundle:" = GSTheme;
	    "-license" = GSTheme;
	    "-name" = GSTheme;
	    "-nameForElement:" = GSTheme;
	    "-overriddenMethod:for:" = GSTheme;
	    "-setName:" = GSTheme;
	    "-setName:forElement:temporary:" = GSTheme;
	    "-themeInspector" = GSTheme;
	    "-tilesFlush:state:" = GSTheme;
	    "-tilesNamed:state:" = GSTheme;
	    "-versionString" = GSTheme;
	};
	"GSTheme(Drawing)" = {
	    "-badgeBackgroundColor" = GSTheme;
	    "-badgeDecorationColor" = GSTheme;
	    "-badgeTextColor" = GSTheme;
	    "-browserColumnSeparation" = GSTheme;
	    "-browserHeaderDrawingRectForCell:withFrame:" = GSTheme;
	    "-browserHeaderTextColor" = GSTheme;
	    "-browserUseBezels" = GSTheme;
	    "-browserVerticalPadding" = GSTheme;
	    "-buttonMarginsForCell:style:state:" = GSTheme;
	    "-cellForScrollerArrow:horizontal:" = GSTheme;
	    "-cellForScrollerKnob:" = GSTheme;
	    "-cellForScrollerKnobSlot:" = GSTheme;
	    "-closeButtonFrameForBounds:" = GSTheme;
	    "-defaultScrollerWidth" = GSTheme;
	    "-drawBackgroundForMenuView:withFrame:dirtyRect:horizontal:" = GSTheme;
	    "-drawBarInside:inCell:flipped:" = GSTheme;
	    "-drawBorderAndBackgroundForMenuItemCell:withFrame:inView:state:isHorizontal:" = GSTheme;
	    "-drawBorderForImageFrameStyle:frame:view:" = GSTheme;
	    "-drawBorderType:frame:view:" = GSTheme;
	    "-drawBoxInClipRect:boxType:borderType:inView:" = GSTheme;
	    "-drawBrowserHeaderCell:withFrame:inView:" = GSTheme;
	    "-drawBrowserRect:inView:withScrollerRect:columnSize:" = GSTheme;
	    "-drawButton:in:view:style:state:" = GSTheme;
	    "-drawColorWellBorder:withBounds:withClip:" = GSTheme;
	    "-drawFocusFrame:view:" = GSTheme;
	    "-drawKnobInCell:" = GSTheme;
	    "-drawMenuRect:inView:isHorizontal:itemCells:" = GSTheme;
	    "-drawMenuTitleBackground:withBounds:withClip:" = GSTheme;
	    "-drawPathComponentCellWithFrame:inView:withCell:isLastComponent:" = GSTheme;
	    "-drawPopUpButtonCellInteriorWithFrame:withCell:inView:" = GSTheme;
	    "-drawProgressIndicator:withBounds:withClip:atCount:forValue:" = GSTheme;
	    "-drawProgressIndicatorBarDeterminate:" = GSTheme;
	    "-drawProgressIndicatorBezel:withClip:" = GSTheme;
	    "-drawScrollViewRect:inView:" = GSTheme;
	    "-drawScrollerRect:inView:hitPart:isHorizontal:" = GSTheme;
	    "-drawSegmentedControlSegment:withFrame:inView:style:state:roundedLeft:roundedRight:" = GSTheme;
	    "-drawSeparatorItemForMenuItemCell:withFrame:inView:isHorizontal:" = GSTheme;
	    "-drawSliderBorderAndBackground:frame:inCell:isHorizontal:" = GSTheme;
	    "-drawStepperBorder:" = GSTheme;
	    "-drawStepperCell:withFrame:inView:highlightUp:highlightDown:" = GSTheme;
	    "-drawStepperDownButton:" = GSTheme;
	    "-drawStepperHighlightDownButton:" = GSTheme;
	    "-drawStepperHighlightUpButton:" = GSTheme;
	    "-drawStepperLightButton::" = GSTheme;
	    "-drawStepperUpButton:" = GSTheme;
	    "-drawSwitchBezel:forState:enabled:" = GSTheme;
	    "-drawSwitchInRect:forState:enabled:" = GSTheme;
	    "-drawSwitchKnob:forState:enabled:" = GSTheme;
	    "-drawTabViewRect:inView:withItems:selectedItem:" = GSTheme;
	    "-drawTableCornerView:withClip:" = GSTheme;
	    "-drawTableHeaderCell:withFrame:inView:state:" = GSTheme;
	    "-drawTableHeaderRect:inView:" = GSTheme;
	    "-drawTableViewBackgroundInClipRect:inView:withBackgroundColor:" = GSTheme;
	    "-drawTableViewGridInClipRect:inView:" = GSTheme;
	    "-drawTableViewRect:inView:" = GSTheme;
	    "-drawTableViewRow:clipRect:inView:" = GSTheme;
	    "-drawTitleForMenuItemCell:withFrame:inView:state:isHorizontal:" = GSTheme;
	    "-drawToolbarRect:frame:borderMask:" = GSTheme;
	    "-drawWindowBackground:view:" = GSTheme;
	    "-drawWindowBorder:withFrame:forStyleMask:state:andTitle:" = GSTheme;
	    "-drawsBorderForMenuItemCell:state:isHorizontal:" = GSTheme;
	    "-highlightTableViewSelectionInClipRect:inView:selectingColumns:" = GSTheme;
	    "-menuBackgroundColor" = GSTheme;
	    "-menuBarBackgroundColor" = GSTheme;
	    "-menuBarBorderColor" = GSTheme;
	    "-menuBarHeight" = GSTheme;
	    "-menuBorderColor" = GSTheme;
	    "-menuBorderColorForEdge:isHorizontal:" = GSTheme;
	    "-menuItemBackgroundColor" = GSTheme;
	    "-menuItemHeight" = GSTheme;
	    "-menuSeparatorColor" = GSTheme;
	    "-menuSeparatorHeight" = GSTheme;
	    "-menuSeparatorInset" = GSTheme;
	    "-menuSubmenuHorizontalOverlap" = GSTheme;
	    "-menuSubmenuVerticalOverlap" = GSTheme;
	    "-miniaturizeButtonFrameForBounds:" = GSTheme;
	    "-resizebarHeight" = GSTheme;
	    "-resizebarNotchWidth" = GSTheme;
	    "-scrollViewScrollersOverlapBorders" = GSTheme;
	    "-scrollViewUseBottomCorner" = GSTheme;
	    "-scrollerArrowsSameEndForScroller:" = GSTheme;
	    "-scrollerScrollsByPageForScroller:" = GSTheme;
	    "-setFrameForCloseButton:viewSize:" = GSTheme;
	    "-setKeyEquivalent:forButtonCell:" = GSTheme;
	    "-sizeForBorderType:" = GSTheme;
	    "-sizeForImageFrameStyle:" = GSTheme;
	    "-stepperDownButtonRectWithFrame:" = GSTheme;
	    "-stepperUpButtonRectWithFrame:" = GSTheme;
	    "-tabViewContentRectForBounds:tabViewType:tabView:" = GSTheme;
	    "-tableHeaderCellDrawingRectForBounds:" = GSTheme;
	    "-tableHeaderTextColorForState:" = GSTheme;
	    "-titleViewClassForMenuView:" = GSTheme;
	    "-titlebarButtonSize" = GSTheme;
	    "-titlebarHeight" = GSTheme;
	    "-titlebarPaddingLeft" = GSTheme;
	    "-titlebarPaddingRight" = GSTheme;
	    "-titlebarPaddingTop" = GSTheme;
	    "-toolbarBackgroundColor" = GSTheme;
	    "-toolbarBorderColor" = GSTheme;
	    "-toolbarIsOpaque" = GSTheme;
	};
	"GSTheme(LowLevelDrawing)" = {
	    "-fillHorizontalRect:withImage:fromRect:flipped:" = GSTheme;
	    "-fillRect:withRepeatedImage:fromRect:center:" = GSTheme;
	    "-fillRect:withTiles:" = GSTheme;
	    "-fillRect:withTiles:background:" = GSTheme;
	    "-fillRect:withTiles:background:fillStyle:" = GSTheme;
	    "-fillVerticalRect:withImage:fromRect:flipped:" = GSTheme;
	};
	"GSTheme(Menus)" = {
	    "-displayPopUpMenu:withCellFrame:controlViewWindow:preferredEdge:selectedItem:" = GSTheme;
	    "-doesProcessEventsForPopUpMenu" = GSTheme;
	    "-keyForKeyEquivalent:" = GSTheme;
	    "-menuHeightForWindow:" = GSTheme;
	    "-menuShouldShowIcon" = GSTheme;
	    "-modifyRect:forMenu:isHorizontal:" = GSTheme;
	    "-organizeMenu:isHorizontal:" = GSTheme;
	    "-processCommand:" = GSTheme;
	    "-proposedTitle:forMenuItem:" = GSTheme;
	    "-proposedTitleWidth:forMenuView:" = GSTheme;
	    "-rightMouseDisplay:forEvent:" = GSTheme;
	    "-setMenu:forWindow:" = GSTheme;
	    "-updateAllWindowsWithMenu:" = GSTheme;
	    "-updateMenu:forWindow:" = GSTheme;
	};
	"GSTheme(MidLevelDrawing)" = {
	    "-drawButton:withClip:" = GSTheme;
	    "-drawDarkBezel:withClip:" = GSTheme;
	    "-drawDarkButton:withClip:" = GSTheme;
	    "-drawFramePhoto:withClip:" = GSTheme;
	    "-drawGradientBorder:inRect:withClip:" = GSTheme;
	    "-drawGrayBezel:withClip:" = GSTheme;
	    "-drawGroove:withClip:" = GSTheme;
	    "-drawLightBezel:withClip:" = GSTheme;
	    "-drawWhiteBezel:withClip:" = GSTheme;
	};
	"GSTheme(NSBrowserCell)" = {
	    "-branchImage" = GSTheme;
	    "-drawBrowserInteriorWithFrame:withCell:inView:withImage:alternateImage:isHighlighted:state:isLeaf:" = GSTheme;
	    "-drawEditorForCell:withFrame:inView:" = GSTheme;
	    "-drawInCell:attributedText:inFrame:" = GSTheme;
	    "-highlightedBranchImage" = GSTheme;
	};
	"GSTheme(NSWindow)" = {
	    "-didSetDefaultButtonCell:" = GSTheme;
	    "-standardWindowButton:forStyleMask:" = GSTheme;
	    "-windowDecorator" = GSTheme;
	};
	"GSTheme(OpenSavePanels)" = {
	    "-openPanelClass" = GSTheme;
	    "-savePanelClass" = GSTheme;
	};
	"GSTheme(PrintPanels)" = {
	    "-pageLayoutClass" = GSTheme;
	    "-printPanelClass" = GSTheme;
	};
	GSVbox = {
	    "-addSeparator" = GSVbox;
	    "-addSeparatorWithMinYMargin:" = GSVbox;
	    "-addView:" = GSVbox;
	    "-addView:enablingYResizing:" = GSVbox;
	    "-addView:enablingYResizing:withMinYMargin:" = GSVbox;
	    "-addView:withMinYMargin:" = GSVbox;
	    "-init" = GSVbox;
	    "-numberOfViews" = GSVbox;
	    "-setDefaultMinYMargin:" = GSVbox;
	};
    };
    variable = {
	GSBoxBorder = TypesAndConstants;
	GSBrowserHeader = TypesAndConstants;
	GSColorWell = TypesAndConstants;
	GSColorWellInnerBorder = TypesAndConstants;
	GSDisplayName = TypesAndConstants;
	GSDisplayNumber = TypesAndConstants;
	GSMenuHorizontalBackground = TypesAndConstants;
	GSMenuHorizontalItem = TypesAndConstants;
	GSMenuSeparatorItem = TypesAndConstants;
	GSMenuTitleBackground = TypesAndConstants;
	GSMenuVerticalBackground = TypesAndConstants;
	GSMenuVerticalItem = TypesAndConstants;
	GSPopUpButton = TypesAndConstants;
	GSProgressIndicatorBarDeterminate = TypesAndConstants;
	GSProgressIndicatorBezel = TypesAndConstants;
	GSRadio = TypesAndConstants;
	GSScreenNumber = TypesAndConstants;
	GSScrollerDownArrow = TypesAndConstants;
	GSScrollerHorizontalKnob = TypesAndConstants;
	GSScrollerHorizontalSlot = TypesAndConstants;
	GSScrollerLeftArrow = TypesAndConstants;
	GSScrollerRightArrow = TypesAndConstants;
	GSScrollerUpArrow = TypesAndConstants;
	GSScrollerVerticalKnob = TypesAndConstants;
	GSScrollerVerticalSlot = TypesAndConstants;
	GSSliderHorizontalTrack = TypesAndConstants;
	GSSliderVerticalTrack = TypesAndConstants;
	GSSwitch = TypesAndConstants;
	GSTabViewBackgroundTabFill = TypesAndConstants;
	GSTabViewBottomBackgroundTabFill = TypesAndConstants;
	GSTabViewBottomSelectedTabFill = TypesAndConstants;
	GSTabViewBottomUnSelectedTabFill = TypesAndConstants;
	GSTabViewLeftBackgroundTabFill = TypesAndConstants;
	GSTabViewLeftSelectedTabFill = TypesAndConstants;
	GSTabViewLeftUnSelectedTabFill = TypesAndConstants;
	GSTabViewRightBackgroundTabFill = TypesAndConstants;
	GSTabViewRightSelectedTabFill = TypesAndConstants;
	GSTabViewRightUnSelectedTabFill = TypesAndConstants;
	GSTabViewSelectedTabFill = TypesAndConstants;
	GSTabViewUnSelectedTabFill = TypesAndConstants;
	GSTableCorner = TypesAndConstants;
	GSTableHeader = TypesAndConstants;
	GSThemeDidActivateNotification = TypesAndConstants;
	GSThemeDidDeactivateNotification = TypesAndConstants;
	GSThemeWillActivateNotification = TypesAndConstants;
	GSThemeWillDeactivateNotification = TypesAndConstants;
    };
}
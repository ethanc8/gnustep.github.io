{
    GSDisplayServer = (
	"+setDefaultServerClass:",
	"+serverWithAttributes:",
	"+setCurrentServer:",
	"-initWithAttributes:",
	"-attributes",
	"-closeServer",
	"-glContextClass",
	"-glPixelFormatClass",
	"-handlesWindowDecorations",
	"+addDragTypes:toWindow:",
	"+removeDragTypes:fromWindow:",
	"+dragTypesForWindow:",
	"-addDragTypes:toWindow:",
	"-removeDragTypes:fromWindow:",
	"-dragTypesForWindow:",
	"-dragInfo",
	"-slideImage:from:to:",
	"-restrictWindow:toImage:",
	"-findWindowAt:windowRef:excluding:",
	"-resolutionForScreen:",
	"-boundsForScreen:",
	"-windowDepthForScreen:",
	"-availableDepthsForScreen:",
	"-screenList",
	"-serverDevice",
	"-windowDevice:",
	"-beep",
	"-iconTileImage",
	"-iconSize",
	"-contentsOfScreen:inRect:"
    );
    "GSDisplayServer(EventOps)" = (
	"-getEventMatchingMask:beforeDate:inMode:dequeue:",
	"-discardEventsMatchingMask:beforeEvent:",
	"-postEvent:atStart:",
	"-_printEventQueue"
    );
    "GSDisplayServer(WindowOps)" = (
	"-_setWindowOwnedByServer:",
	"-window:::",
	"-window::::",
	"-termwindow:",
	"-nativeWindow:::::",
	"-stylewindow::",
	"-windowbacking::",
	"-titlewindow::",
	"-miniwindow:",
	"-hideApplication:",
	"-appOwnsMiniwindow",
	"-setWindowdevice:forContext:",
	"-windowdevice:",
	"-orderwindow:::",
	"-movewindow::",
	"-placewindow::",
	"-windowbounds:",
	"-setwindowlevel::",
	"-windowlevel:",
	"-windowlist",
	"-windowdepth:",
	"-setmaxsize::",
	"-setminsize::",
	"-setresizeincrements::",
	"-flushwindowrect::",
	"-styleoffsets:::::",
	"-docedited::",
	"-setinputstate::",
	"-setinputfocus:",
	"-setalpha::",
	"-setShadow::",
	"-mouselocation",
	"-mouseLocationOnScreen:window:",
	"-capturemouse:",
	"-releasemouse",
	"-setMouseLocation:onScreen:",
	"-hidecursor",
	"-showcursor",
	"-standardcursor::",
	"-imagecursor:::",
	"-setcursorcolor:::",
	"-recolorcursor:::",
	"-setcursor:",
	"-freecursor:",
	"-setParentWindow:forChildWindow:",
	"-setIgnoreMouse::"
    );
    GSHbox = (
	"-init",
	"-addView:",
	"-addView:enablingXResizing:",
	"-addView:withMinXMargin:",
	"-addView:enablingXResizing:withMinXMargin:",
	"-addSeparator",
	"-addSeparatorWithMinXMargin:",
	"-setDefaultMinXMargin:",
	"-numberOfViews"
    );
    GSTable = (
	"-initWithNumberOfRows:numberOfColumns:",
	"-init",
	"-setBorder:",
	"-setXBorder:",
	"-setYBorder:",
	"-setMinXBorder:",
	"-setMaxXBorder:",
	"-setMinYBorder:",
	"-setMaxYBorder:",
	"-putView:atRow:column:",
	"-putView:atRow:column:withMargins:",
	"-putView:atRow:column:withXMargins:yMargins:",
	"-putView:atRow:column:withMinXMargin:maxXMargin:minYMargin:maxYMargin:",
	"-minimumSize",
	"-sizeToFit",
	"-setXResizingEnabled:forColumn:",
	"-isXResizingEnabledForColumn:",
	"-setYResizingEnabled:forRow:",
	"-isYResizingEnabledForRow:",
	"-addRow",
	"-addColumn",
	"-numberOfRows",
	"-numberOfColumns"
    );
    GSTheme = (
	"+loadThemeNamed:",
	"+orderFrontSharedThemePanel:",
	"+setTheme:",
	"+theme",
	"-activate",
	"-authors",
	"-bundle",
	"-colorClass",
	"-colorFlush:state:",
	"-colorNamed:state:",
	"-colors",
	"-deactivate",
	"-icon",
	"-imageClass",
	"-initWithBundle:",
	"-infoDictionary",
	"-name",
	"-nameForElement:",
	"-overriddenMethod:for:",
	"-setName:",
	"-setName:forElement:temporary:",
	"-themeInspector",
	"-tilesFlush:state:",
	"-tilesNamed:state:",
	"-versionString",
	"-license"
    );
    "GSTheme(Drawing)" = (
	"-setKeyEquivalent:forButtonCell:",
	"-drawButton:in:view:style:state:",
	"-buttonMarginsForCell:style:state:",
	"-drawFocusFrame:view:",
	"-drawWindowBackground:view:",
	"-drawBorderType:frame:view:",
	"-sizeForBorderType:",
	"-drawBorderForImageFrameStyle:frame:view:",
	"-sizeForImageFrameStyle:",
	"-scrollerArrowsSameEndForScroller:",
	"-scrollerScrollsByPageForScroller:",
	"-cellForScrollerArrow:horizontal:",
	"-cellForScrollerKnob:",
	"-cellForScrollerKnobSlot:",
	"-defaultScrollerWidth",
	"-scrollViewUseBottomCorner",
	"-scrollViewScrollersOverlapBorders",
	"-toolbarBackgroundColor",
	"-toolbarBorderColor",
	"-drawToolbarRect:frame:borderMask:",
	"-toolbarIsOpaque",
	"-drawStepperCell:withFrame:inView:highlightUp:highlightDown:",
	"-stepperUpButtonRectWithFrame:",
	"-stepperDownButtonRectWithFrame:",
	"-drawStepperBorder:",
	"-drawStepperLightButton::",
	"-drawStepperUpButton:",
	"-drawStepperHighlightUpButton:",
	"-drawStepperDownButton:",
	"-drawStepperHighlightDownButton:",
	"-drawSwitchKnob:forState:enabled:",
	"-drawSwitchBezel:forState:enabled:",
	"-drawSwitchInRect:forState:enabled:",
	"-drawPathComponentCellWithFrame:inView:withCell:isLastComponent:",
	"-drawSegmentedControlSegment:withFrame:inView:style:state:roundedLeft:roundedRight:",
	"-menuBackgroundColor",
	"-menuItemBackgroundColor",
	"-menuBarBackgroundColor",
	"-menuBarBorderColor",
	"-menuBorderColor",
	"-menuBorderColorForEdge:isHorizontal:",
	"-drawBackgroundForMenuView:withFrame:dirtyRect:horizontal:",
	"-drawsBorderForMenuItemCell:state:isHorizontal:",
	"-drawBorderAndBackgroundForMenuItemCell:withFrame:inView:state:isHorizontal:",
	"-drawTitleForMenuItemCell:withFrame:inView:state:isHorizontal:",
	"-menuSeparatorColor",
	"-menuSeparatorInset",
	"-menuSubmenuHorizontalOverlap",
	"-menuSubmenuVerticalOverlap",
	"-drawSeparatorItemForMenuItemCell:withFrame:inView:isHorizontal:",
	"-titleViewClassForMenuView:",
	"-drawMenuTitleBackground:withBounds:withClip:",
	"-menuBarHeight",
	"-menuItemHeight",
	"-menuSeparatorHeight",
	"-drawColorWellBorder:withBounds:withClip:",
	"-drawProgressIndicator:withBounds:withClip:atCount:forValue:",
	"-drawProgressIndicatorBezel:withClip:",
	"-drawProgressIndicatorBarDeterminate:",
	"-tableHeaderTextColorForState:",
	"-drawTableCornerView:withClip:",
	"-drawTableHeaderCell:withFrame:inView:state:",
	"-titlebarHeight",
	"-resizebarHeight",
	"-resizebarNotchWidth",
	"-titlebarButtonSize",
	"-titlebarPaddingRight",
	"-titlebarPaddingTop",
	"-titlebarPaddingLeft",
	"-drawWindowBorder:withFrame:forStyleMask:state:andTitle:",
	"-setFrameForCloseButton:viewSize:",
	"-miniaturizeButtonFrameForBounds:",
	"-closeButtonFrameForBounds:",
	"-browserHeaderTextColor",
	"-drawBrowserHeaderCell:withFrame:inView:",
	"-browserHeaderDrawingRectForCell:withFrame:",
	"-tabViewContentRectForBounds:tabViewType:tabView:",
	"-drawTabViewRect:inView:withItems:selectedItem:",
	"-drawScrollerRect:inView:hitPart:isHorizontal:",
	"-drawBrowserRect:inView:withScrollerRect:columnSize:",
	"-browserColumnSeparation",
	"-browserVerticalPadding",
	"-browserUseBezels",
	"-drawMenuRect:inView:isHorizontal:itemCells:",
	"-drawScrollViewRect:inView:",
	"-drawSliderBorderAndBackground:frame:inCell:isHorizontal:",
	"-drawBarInside:inCell:flipped:",
	"-drawKnobInCell:",
	"-tableHeaderCellDrawingRectForBounds:",
	"-drawTableHeaderRect:inView:",
	"-drawPopUpButtonCellInteriorWithFrame:withCell:inView:",
	"-drawTableViewBackgroundInClipRect:inView:withBackgroundColor:",
	"-drawTableViewRect:inView:",
	"-drawTableViewGridInClipRect:inView:",
	"-highlightTableViewSelectionInClipRect:inView:selectingColumns:",
	"-drawTableViewRow:clipRect:inView:",
	"-drawBoxInClipRect:boxType:borderType:inView:",
	"-badgeBackgroundColor",
	"-badgeDecorationColor",
	"-badgeTextColor"
    );
    "GSTheme(LowLevelDrawing)" = (
	"-fillHorizontalRect:withImage:fromRect:flipped:",
	"-fillRect:withRepeatedImage:fromRect:center:",
	"-fillRect:withTiles:background:fillStyle:",
	"-fillRect:withTiles:background:",
	"-fillRect:withTiles:",
	"-fillVerticalRect:withImage:fromRect:flipped:"
    );
    "GSTheme(Menus)" = (
	"-setMenu:forWindow:",
	"-rightMouseDisplay:forEvent:",
	"-displayPopUpMenu:withCellFrame:controlViewWindow:preferredEdge:selectedItem:",
	"-doesProcessEventsForPopUpMenu",
	"-menuShouldShowIcon",
	"-processCommand:",
	"-menuHeightForWindow:",
	"-updateMenu:forWindow:",
	"-updateAllWindowsWithMenu:",
	"-modifyRect:forMenu:isHorizontal:",
	"-proposedTitleWidth:forMenuView:",
	"-keyForKeyEquivalent:",
	"-proposedTitle:forMenuItem:",
	"-organizeMenu:isHorizontal:"
    );
    "GSTheme(MidLevelDrawing)" = (
	"-drawButton:withClip:",
	"-drawDarkBezel:withClip:",
	"-drawDarkButton:withClip:",
	"-drawFramePhoto:withClip:",
	"-drawGradientBorder:inRect:withClip:",
	"-drawGrayBezel:withClip:",
	"-drawGroove:withClip:",
	"-drawLightBezel:withClip:",
	"-drawWhiteBezel:withClip:"
    );
    "GSTheme(NSBrowserCell)" = (
	"-drawEditorForCell:withFrame:inView:",
	"-drawInCell:attributedText:inFrame:",
	"-drawBrowserInteriorWithFrame:withCell:inView:withImage:alternateImage:isHighlighted:state:isLeaf:",
	"-branchImage",
	"-highlightedBranchImage"
    );
    "GSTheme(NSWindow)" = (
	"-windowDecorator",
	"-standardWindowButton:forStyleMask:",
	"-didSetDefaultButtonCell:"
    );
    "GSTheme(OpenSavePanels)" = (
	"-openPanelClass",
	"-savePanelClass"
    );
    "GSTheme(PrintPanels)" = (
	"-printPanelClass",
	"-pageLayoutClass"
    );
    GSVbox = (
	"-init",
	"-addView:",
	"-addView:enablingYResizing:",
	"-addView:withMinYMargin:",
	"-addView:enablingYResizing:withMinYMargin:",
	"-addSeparator",
	"-addSeparatorWithMinYMargin:",
	"-setDefaultMinYMargin:",
	"-numberOfViews"
    );
}